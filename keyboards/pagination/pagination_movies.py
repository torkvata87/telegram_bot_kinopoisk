from typing import Any, Dict, List

from telegram_bot_pagination import InlineKeyboardPaginator, InlineKeyboardButton
from telebot.types import InlineKeyboardButton

from services.services_logging import error_logger_func
from logs.logging_config import log


@error_logger_func
def create_paginator_movies(
    movies_data: List[Dict[str, Any]],
    current_page: int,
    total_pages: int = 1,
    page_number: int = 1,
    show_pagination_descr: bool = False,
) -> InlineKeyboardPaginator:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É —Ñ–∏–ª—å–º–æ–≤.
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–ª–∏ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ, –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞,
    –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞, –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞ –Ω–∞ —Å–∞–π—Ç–µ
    `–ö–∏–Ω–æ–ø–æ–∏—Å–∫` (https://www.kinopoisk.ru).

    Args:
        movies_data (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö.
        current_page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤.
        total_pages (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ñ–∏–ª—å–º–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–æ 1.
        page_number (int): –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å–µ —Å–∞–π—Ç–∞ `–ö–∏–Ω–æ–ø–æ–∏—Å–∫`.
        show_pagination_descr (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é `False`.

    Returns:
        InlineKeyboardPaginator: –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É —Ñ–∏–ª—å–º–æ–≤.

     Raises:
        TypeError: –ï—Å–ª–∏ `movies_data` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
        ValueError: –ï—Å–ª–∏ `current_page`, `total_pages` –∏–ª–∏ `page_number` –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    if not isinstance(movies_data, list):
        raise TypeError("movies_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º.")
    if not all(isinstance(item, dict) for item in movies_data):
        raise TypeError("–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç movies_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º.")
    if not isinstance(current_page, int):
        raise ValueError("current_page –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    if not isinstance(total_pages, int) or total_pages < 1:
        raise ValueError("total_pages –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    if not isinstance(page_number, int) or page_number < 1:
        raise ValueError("page_number –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")

    description = movies_data[current_page - 1]["description"]
    id_movie = movies_data[current_page - 1]["movie_id"]
    is_favorites = movies_data[current_page - 1]["is_favorites"]
    is_viewed = movies_data[current_page - 1]["is_viewed"]
    type_search = movies_data[current_page - 1]["type_search"]

    paginator = InlineKeyboardPaginator(
        len(movies_data), current_page=current_page, data_pattern="movie#{page}"
    )

    star_favorites = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if not is_favorites else "üåü –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º"
    eye_viewed = "‚ùéÔ∏è –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" if not is_viewed else "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
    url = f"https://www.kinopoisk.ru/film/{id_movie}/"
    btn_favorites = InlineKeyboardButton(
        star_favorites, callback_data=f"is_favorites#{current_page}"
    )
    btn_viewed = InlineKeyboardButton(
        eye_viewed, callback_data=f"is_viewed#{current_page}"
    )
    btn_more = InlineKeyboardButton(
        text="üìú –ë–æ–ª—å—à–µ", callback_data=f"show_description#{current_page}"
    )
    btn_url = InlineKeyboardButton(text="üåê", url=url)
    btn_new_search = InlineKeyboardButton(
        text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"
    )
    btn_back_menu = InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=type_search
    )
    btn_continue = InlineKeyboardButton(
        text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="continue_search"
    )
    btn_search_back = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="search_back")
    btn_back = InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_movie#{current_page}"
    )

    paginator.add_before(btn_viewed, btn_favorites)

    if not show_pagination_descr:
        btn_more_info = btn_more if description else btn_url
        btn_type_search = (
            btn_new_search if type_search.startswith("movie") else btn_back_menu
        )

        if current_page == len(movies_data) and total_pages > 1:
            paginator.add_after(btn_more_info, btn_continue)
            paginator.add_after(btn_type_search)
        elif current_page == 1 and page_number > 1:
            paginator.add_after(btn_more_info, btn_search_back)
            paginator.add_after(btn_type_search)
        else:
            paginator.add_after(btn_more_info, btn_type_search)

    else:
        paginator.add_after(btn_url, btn_back)

    return paginator
