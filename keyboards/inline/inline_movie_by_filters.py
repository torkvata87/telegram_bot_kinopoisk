from typing import Dict

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from services.services_logging import error_logger_func, raises_keyboard

from .inline_keyboard import create_inline_keyboard
from ..buttons.btns_for_movie_by_filters import list_ratings


@error_logger_func
def select_type_keyboard(
    button_labels: Dict[str, str], buttons_per_row: int
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —Ñ–∏–ª—å–º–∞ —Å –∫–Ω–æ–ø–∫–æ–π `–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥`.

    Args:
        button_labels (Dict[str, str]): –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (`callback_data`),
            –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫.
        buttons_per_row (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —Ñ–∏–ª—å–º–∞.
    """
    raises_keyboard(button_labels, buttons_per_row)
    keyboard = create_inline_keyboard(button_labels, buttons_per_row)

    button = InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥", callback_data="end_type")

    keyboard.add(button)
    return keyboard


@error_logger_func
def select_genres_keyboard(
    button_labels: Dict[str, str], buttons_per_row: int
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–∞ —Å –∫–Ω–æ–ø–∫–æ–π `–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥`.

    Args:
        button_labels (Dict[str, str]): –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (`callback_data`),
            –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫.
        buttons_per_row (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–∞.
    """
    raises_keyboard(button_labels, buttons_per_row)
    keyboard = create_inline_keyboard(button_labels, buttons_per_row)

    button_1 = InlineKeyboardButton(text="‚ùå –ò—Å–∫–ª—é—á–∏—Ç—å", callback_data="exclude_genres")
    button_2 = InlineKeyboardButton(
        text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥", callback_data="end_genres"
    )

    keyboard.add(button_1, button_2)
    return keyboard


@error_logger_func
def select_countries_keyboard(
    button_labels: Dict[str, str],
    buttons_per_row: int,
    include_other_option: bool = False,
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–ª—å–º–∞,
    —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ `–ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ` –∏ –∫–Ω–æ–ø–∫–æ–π `–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥`.

    Args:
        button_labels (Dict[str, str]): –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (`callback_data`),
            –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫.
        buttons_per_row (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
        include_other_option (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫—É `–ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ`.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é `False`.

    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–ª—å–º–∞.
    """
    raises_keyboard(button_labels, buttons_per_row)
    keyboard = create_inline_keyboard(button_labels, buttons_per_row)

    button_1 = InlineKeyboardButton(
        text="‚û°Ô∏è –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ", callback_data="other_countries"
    )
    button_2 = InlineKeyboardButton(
        text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥", callback_data="end_countries"
    )
    if include_other_option:
        keyboard.add(button_1, button_2)
        return keyboard

    keyboard.add(button_2)
    return keyboard


@error_logger_func
def select_rating_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ñ–∏–ª—å–º–∞ —Å –∫–Ω–æ–ø–∫–æ–π `–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥`.

    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ñ–∏–ª—å–º–∞.
    """
    buttons = [InlineKeyboardButton(elem, callback_data=elem) for elem in list_ratings]
    keyboard = InlineKeyboardMarkup(row_width=5)

    for i in range(0, len(buttons), 5):
        keyboard.row(*buttons[i : i + 5])

    button = InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥", callback_data="end_rating")
    keyboard.add(button)

    return keyboard


@error_logger_func
def select_filters_keyboard(
    button_labels: Dict[str, str], buttons_per_row: int
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
    —Å –∫–Ω–æ–ø–∫–∞–º–∏ `–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã` –∏ `–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫`.

    Args:
        button_labels (Dict[str, str]): –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (`callback_data`),
            –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫.
        buttons_per_row (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–∞.
    """
    raises_keyboard(button_labels, buttons_per_row)
    keyboard = create_inline_keyboard(button_labels, buttons_per_row)

    button_1 = InlineKeyboardButton(
        text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="filters_default"
    )
    button_2 = InlineKeyboardButton(
        text="üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="search_start"
    )
    keyboard.add(button_1)
    keyboard.add(button_2)

    return keyboard
