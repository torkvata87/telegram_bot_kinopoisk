from typing import Any, List, Dict

from telebot.types import Message
from telebot.apihelper import ApiTelegramException

from config_data.config import IMAGE_EMPTY_POSTER
from keyboards.pagination.pagination_movies import create_paginator_movies
from keyboards.pagination.pagination_history import create_paginator_history
from loader import bot

from services.services_logging import error_logger_bot, error_logger_func

from logs.logging_config import log


@error_logger_func
def send_movie_pagination(
    chat_id: int,
    movies_data: List[Dict[str, Any]],
    current_page: int = 1,
    total_pages: int = 1,
    page_number: int = 1,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∏–ª—å–º–æ–≤ –≤ –≤–∏–¥–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

    Args:
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å chat_id –∏–ª–∏ user_id.
        movies_data (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö.
        current_page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–∞ 1.
        total_pages (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ñ–∏–ª—å–º–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–æ 1.
        page_number (int): –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å–µ —Å–∞–π—Ç–∞ "–ö–∏–Ω–æ–ø–æ–∏—Å–∫".
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–µ–Ω 1.

    Raises:
        ValueError: –ï—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å–º–∞.
        IndexError: –ï—Å–ª–∏ current_page –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü.
        ApiTelegramException: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API —Ç–∏–ø–∞ "400 Bad Request:
            wrong type of the web page content".
    """
    if not isinstance(movies_data, list):
        raise ValueError("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–∞—Ö –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.")
    # if not (1 <= current_page <= len(movies_data)):
    #     raise IndexError("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")

    data_movie = movies_data[current_page - 1]

    emoji_data = {
        "movie": "üéûÔ∏è",
        "tv-series": "üì∫",
        "cartoon": "ü¶Ñ",
        "anime": "üå∏",
        "animated-series": "üì∫ü¶Ñ",
    }

    movie_param = [
        {"üåç ": data_movie["countries"]},
        {"\n\nüé≠ ": data_movie["genre"]},
        {"\n\nüèÜ ": data_movie["rating"]},
        {"\t\t\tüë¶ +": data_movie["age_rating"]},
        {"\n\nüìù ": data_movie["short_description"]},
    ]

    text_data = "".join(
        [
            f"{key}<i>{value}</i>"
            for elem in movie_param
            for key, value in elem.items()
            if value
        ]
    )

    alternative_name = (
        f"/ {data_movie['alternative_name']} "
        if data_movie["alternative_name"]
        else " "
    )

    text = (
        f"{emoji_data[data_movie['type_movie']]} <b>{data_movie['name_movie']}</b> "
        f"<i>{alternative_name}({data_movie['year']})</i>\n\n"
        f"{text_data}"
    )

    image = data_movie["poster"]
    paginator = create_paginator_movies(
        movies_data, current_page, total_pages, page_number
    )
    try:
        if not image:
            raise ValueError("–ü–æ—Å—Ç–µ—Ä —Ñ–∏–ª—å–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        bot.send_photo(
            chat_id,
            image,
            caption=text,
            reply_markup=paginator.markup,
            parse_mode="HTML",
        )
    except (ApiTelegramException, ValueError) as exc:
        with open(IMAGE_EMPTY_POSTER, "rb") as image_file:
            bot.send_photo(
                chat_id,
                image_file,
                caption=text,
                reply_markup=paginator.markup,
                parse_mode="HTML",
            )

        log.error(
            f"{type(exc).__name__}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API - {exc}."
        )
        log.info("–í —á–∞—Ç –±—ã–ª–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º –ø–æ—Å—Ç–µ—Ä–æ–º.")


@error_logger_func
def send_description_pagination_page(
    chat_id: int, movies_data: List[Dict[str, Any]], current_page: int = 1
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–∏–ª—å–º–∞–º–∏.

    Args:
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å chat_id –∏–ª–∏ user_id.
        movies_data (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö.
        current_page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–∞ 1.

    Raises:
        ValueError: –ï—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤.
        IndexError: –ï—Å–ª–∏ current_page –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    if not isinstance(movies_data, list):
        raise ValueError("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–∞—Ö –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.")
    if not (1 <= current_page <= len(movies_data)):
        raise IndexError("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")

    description = movies_data[current_page - 1]["description"]
    paginator = create_paginator_movies(
        movies_data, current_page, show_pagination_descr=True
    )

    text = f"üìú {description}"
    keyboard = paginator.markup

    if description:
        bot.send_message(chat_id, text, reply_markup=keyboard, parse_mode="HTML")


@error_logger_bot
def get_check_status(
    message: Message,
    movies_data: List[Dict[str, Any]],
    current_page: int = 1,
    total_pages: int = 1,
    page_number: int = 1,
    show_pagination_descr: bool = False,
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–ª—å–º–∞ "–ò–∑–±—Ä–∞–Ω–Ω—ã–π" –∏–ª–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π".

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
        movies_data (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö.
        current_page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–∞ 1.
        total_pages (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ñ–∏–ª—å–º–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–æ 1.
        page_number (int): –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å–µ —Å–∞–π—Ç–∞ "–ö–∏–Ω–æ–ø–æ–∏—Å–∫".
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–µ–Ω 1.
        show_pagination_descr (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é `False`.

    Raises:
        ValueError: –ï—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤.
    """
    if not isinstance(movies_data, list):
        raise ValueError("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.")

    paginator = create_paginator_movies(
        movies_data, current_page, total_pages, page_number, show_pagination_descr
    )

    bot.edit_message_reply_markup(
        message.chat.id, message.message_id, reply_markup=paginator.markup
    )


@error_logger_bot
def send_history_pagination(
    chat_id: int,
    history_data: List[Dict[str, Any]],
    number_queries_on_page: int,
    string_response: str = "",
    current_page: int = 1,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–¥–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

    Args:
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å chat_id –∏–ª–∏ user_id.
        history_data (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.
        number_queries_on_page (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
        string_response (str): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ö. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
        current_page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–∞ 1.

    Raises:
        ValueError: –ï—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
        IndexError: –ï—Å–ª–∏ current_page –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    if not isinstance(history_data, list):
        raise ValueError("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.")
    if not (1 <= current_page <= len(history_data)):
        raise IndexError("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")

    paginator = create_paginator_history(
        history_data, number_queries_on_page, current_page
    )
    filter_search = ", ".join(string_response) if string_response else "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
    text = f"üìå –ó–∞–¥–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º: <b><i>{filter_search}</i></b>"
    bot.send_message(
        chat_id,
        text,
        reply_markup=paginator.markup,
        parse_mode="HTML",
    )
