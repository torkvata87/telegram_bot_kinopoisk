from typing import Any, Callable, Dict, Tuple
from functools import wraps
import traceback

from telebot.types import Message, CallbackQuery
from telebot.apihelper import ApiTelegramException

from loader import bot
from logs.exception_description import exception_type
from logs.exceptions import BotStatePaginationNotFoundError, ServerRequestError
from logs.logging_config import log

from services.services_utils import set_ids
from states.search_fields import SearchStates


def raises_keyboard(button_labels: Dict[str, str], buttons_per_row: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    Args:
        button_labels (Dict[str, str]): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫.
        buttons_per_row (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    Returns:
        Any | None: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏.

    Raises:
        TypeError: –ï—Å–ª–∏ `button_labels` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ `buttons_per_row` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.
        ValueError: –ï—Å–ª–∏ `buttons_per_row` –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω—É–ª—é.
    """
    if not isinstance(button_labels, dict):
        raise TypeError("button_labels –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º —Ç–∏–ø–∞ Dict[str, str]")
    if not isinstance(buttons_per_row, int):
        raise TypeError("buttons_per_row –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    if buttons_per_row <= 0:
        raise ValueError("buttons_per_row –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –Ω—É–ª—è")


def extract_ids(args) -> Tuple[int | None | Any, int | None, int | None]:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è chat_id, user_id –∏ message_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

    Args:
        *args: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é.

    Returns:
        Tuple[int | None, int | None, int | None]: –ö–æ—Ä—Ç–µ–∂ –∏–∑ chat_id, user_id –∏ message_id. –ï—Å–ª–∏ id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã,
            –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    if len(args) > 0 and isinstance(args[0], (Message, CallbackQuery, int)):
        if isinstance(args[0], int):
            chat_id = args[0]
            return chat_id, None, None
        else:
            chat_id, user_id, message_id = set_ids(args[0])
        return chat_id, user_id, message_id
    return None, None, None


def handle_exception(func: Callable, exc: Exception) -> None:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        func (Callable): –î–µ–∫–æ—Ä–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
        exc (Exception): –ò—Å–∫–ª—é—á–µ–Ω–∏–µ.
    """
    line_number = traceback.extract_tb(exc.__traceback__)[-1].lineno

    message = exception_type.get(type(exc), f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    log.error(
        f"{func.__module__}.{func.__name__}: {line_number} - {type(exc).__name__}: {message} ({exc})."
    )


def error_logger_bot(func: Callable) -> Callable:
    """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.

        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞. –û–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –æ—à–∏–±–∫—É. –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞,
        –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤.

        Args:
            func (Callable): –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

        Returns:
            Callable: –û–±–µ—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.

        Raises:
            BotStatePaginationNotFoundError: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –±–æ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤.
            Exception: –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        """
    @wraps(func)
    def wrapper(*args, **kwargs) -> Any | None:
        chat_id, user_id, message_id = extract_ids(args)
        try:
            return func(*args, **kwargs)
        except BotStatePaginationNotFoundError as exc:
            handle_exception(func, exc)
            text = (
                "üö´ <b>–°–µ—Å—Å–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –∏—Å—Ç–µ–∫–ª–∞.</b>\n\n"
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b><i>–Ω–∞–∑–≤–∞–Ω–∏–µ</i></b> —Ñ–∏–ª—å–º–∞ üé¨ "
                "–≤ —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ /help."
            )
            bot.set_state(user_id, SearchStates.movie_name, chat_id)
            bot.send_message(chat_id, text, parse_mode="HTML")
            bot.delete_message(chat_id, message_id)
            return None
        except Exception as exc:
            handle_exception(func, exc)
            text = (
                f"üö´ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ <i>{type(exc).__name__}</i></b>.\n\n"
                "‚åõ –ó–∞–π–¥–∏—Ç–µ —Å—é–¥–∞ –ø–æ–∑–∂–µ –∏–ª–∏ \n‚úçÔ∏è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ /help."
            )
            bot.send_message(chat_id, text, parse_mode="HTML")
            try:
                bot.delete_message(chat_id, message_id)
            except ApiTelegramException:
                handle_exception(func, exc)
                return
            return None

    return wrapper


def error_logger_func(func: Callable) -> Callable:
    @wraps(func)
    def wrapper(*args, **kwargs) -> Any | None:
        """
        –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

        Returns:
            Any | None: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏.

        Raises:
            Exception: –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–µ –≤ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
        """
        try:
            return func(*args, **kwargs)
        except ConnectionError as exc:
            handle_exception(func, exc)
            return str(exc)
        except ServerRequestError as exc:
            log.error(f"{type(exc).__name__}: {exc}")
            return str(exc)
        except Exception as exc:
            handle_exception(func, exc)
        return None

    return wrapper
